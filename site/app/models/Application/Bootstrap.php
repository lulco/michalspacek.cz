<?php
namespace MichalSpacekCz\Application;

// Load Nette Framework or autoloader generated by Composer
require __DIR__ . '/../../../vendor/autoload.php';

/**
 * The michalspacek.cz bootstrap class.
 *
 * @author     Michal Špaček
 * @package    michalspacek.cz
 */
class Bootstrap extends \Nette\Object
{

	/** @var string */
	const MODE_PRODUCTION = 'production';

	/** @var string */
	const MODE_DEVELOPMENT = 'development';

	/** @var string */
	private $appDir;

	/** @var string */
	private $logDir;

	/** @var string */
	private $tempDir;

	/** @var string */
	private $environment;


	/**
	 * @param string $appDir
	 * @param string $logDir
	 * @param string $tempDir
	 * @param string $environment
	 */
	public function __construct($appDir, $logDir, $tempDir, $environment)
	{
		$this->appDir = $appDir;
		$this->logDir = $logDir;
		$this->tempDir = $tempDir;
		$this->environment = $environment;
	}


	public function run()
	{
		$configurator = new \Nette\Config\Configurator();

		$configurator->setDebugMode($this->isDebugMode());
		$configurator->enableDebugger($this->logDir);
		$configurator->setTempDirectory($this->tempDir);

		$configurator->createRobotLoader()
			->addDirectory($this->appDir)
			->register();

		$existingFiles = array_filter($this->getConfigurationFiles(), function ($path) {
			return is_file($path);
		});
		foreach ($existingFiles as $filename) {
			$configurator->addConfig($filename, $configurator::NONE);
		}

		$container = $configurator->createContainer();
		$container->application->run();
	}


	private function getConfigurationFiles()
	{
		return array(
			$this->appDir . '/config/config.neon',
			$this->appDir . '/config/parameters.neon',
			$this->appDir . '/config/presenters.neon',
			$this->appDir . '/config/services.neon',
			$this->appDir . '/config/config.extra-' . $this->getRootDomain() . '.neon',
			$this->appDir . '/config/config.local.neon',
		);
	}


	private function getRootDomain()
	{
		// Root domain
		$rootDomain = (isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : '');
		if (preg_match('/([^.]+\.[^.:]+)(?::[0-9]+)?$/', $rootDomain, $matches)) {
			$rootDomain = $matches[1];
		}
		return $rootDomain;
	}


	private function isDebugMode()
	{
		return ($this->environment === self::MODE_DEVELOPMENT);
	}

}
