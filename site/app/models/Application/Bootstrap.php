<?php
namespace MichalSpacekCz\Application;

// Load Nette Framework or autoloader generated by Composer
require __DIR__ . '/../../../vendor/autoload.php';

/**
 * The michalspacek.cz bootstrap class.
 *
 * @author     Michal Špaček
 * @package    michalspacek.cz
 */
class Bootstrap extends \Nette\Object
{

	/** @var string */
	const MODE_PRODUCTION = 'production';

	/** @var string */
	const MODE_DEVELOPMENT = 'development';

	/** @var \Nette\Http\Request */
	private $httpRequest;

	/** @var \Nette\Http\Response */
	private $httpResponse;

	/** @var string */
	private $appDir;

	/** @var string */
	private $logDir;

	/** @var string */
	private $tempDir;

	/** @var string */
	private $environment;


	/**
	 * @param string $appDir
	 * @param string $logDir
	 * @param string $tempDir
	 * @param string $environment
	 */
	public function __construct($appDir, $logDir, $tempDir, $environment)
	{
		$this->appDir = $appDir;
		$this->logDir = $logDir;
		$this->tempDir = $tempDir;
		$this->environment = $environment;
	}


	public function run()
	{
		$configurator = new \Nette\Configurator();
		$configurator->addParameters(['appDir' => $this->appDir]);

		$configurator->setDebugMode($this->isDebugMode());
		$configurator->enableDebugger($this->logDir);
		$configurator->setTempDirectory($this->tempDir);

		$configurator->createRobotLoader()
			->addDirectory($this->appDir)
			->register();

		$existingFiles = array_filter($this->getConfigurationFiles(), function ($path) {
			return is_file($path);
		});
		foreach ($existingFiles as $filename) {
			$configurator->addConfig($filename, $configurator::NONE);
		}

		$container = $configurator->createContainer();

		$this->httpRequest = $container->getByType(\Nette\Http\IRequest::class);
		$this->httpResponse = $container->getByType(\Nette\Http\IResponse::class);

		$securityHeaders = $container->getByType(\MichalSpacekCz\SecurityHeaders::class);
		$securityHeaders->sendHeaders();

		$this->redirectToSecure();

		$container->getByType(\Nette\Application\Application::class)->run();
	}


	private function getConfigurationFiles()
	{
		return array_unique(array(
			$this->appDir . '/config/extensions.neon',
			$this->appDir . '/config/config.neon',
			$this->appDir . '/config/parameters.neon',
			$this->appDir . '/config/routes.neon',
			$this->appDir . '/config/presenters.neon',
			$this->appDir . '/config/services.neon',
			$this->appDir . '/config/config.extra-' . $this->getRootDomain('HTTP_HOST') . '.neon',
			$this->appDir . '/config/config.extra-' . $this->getRootDomain('SERVER_NAME') . '.neon',
			$this->appDir . '/config/config.local.neon',
		));
	}


	private function getRootDomain($key)
	{
		// Root domain
		$rootDomain = (isset($_SERVER[$key]) ? $_SERVER[$key] : '');
		if (preg_match('/([^.]+\.[^.:]+)(?::[0-9]+)?$/', $rootDomain, $matches)) {
			$rootDomain = $matches[1];
		}
		return strtolower($rootDomain);
	}


	private function isDebugMode()
	{
		return ($this->environment === self::MODE_DEVELOPMENT);
	}


	private function redirectToSecure()
	{
		// All baz.waldo, foo.baz.waldo end up in the same dir
		$hostdir = basename(dirname($_SERVER['SCRIPT_FILENAME'])); // /public/www/app.php -> www
		$uri = $_SERVER['REQUEST_URI'];
		// Is this (?:(foo.)|www.(bar.))?(baz.waldo)
		if (preg_match('/^(?:([^.]+\.)|www\.([^.]+\.))?([^.]+\.[^.]+)\z/', $_SERVER['HTTP_HOST'], $m)) {
			if (($m[1] !== "{$hostdir}." || !$this->httpRequest->isSecured()) && empty($m[2])) {
				// baz.waldo or foo.baz.waldo -> www.baz.waldo if foo is not known, also HTTP -> HTTPS
				$this->httpResponse->redirect("https://{$hostdir}.{$m[3]}{$uri}", \Nette\Http\IResponse::S301_MOVED_PERMANENTLY);
				exit;
			} elseif (empty($m[1])) {
				// www.bar.baz.waldo -> https://bar.baz.waldo
				$this->httpResponse->redirect("https://{$m[2]}{$m[3]}{$uri}", \Nette\Http\IResponse::S301_MOVED_PERMANENTLY);
				exit;
			}
		}
	}

}
